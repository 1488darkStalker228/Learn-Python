# Класс - инструкция по созданию объектов определённого типа;
# Объект - единица информации в памяти;
# Классы создают типы данных - объекты в памяти определённого типа, которые мы может изменять и извлекать из них информацию,
# это называется поведением объекта;
# Метод - функция в классе для воздействия на объект;
# Этот словарь - экземпляр класса 'dict' x = {1: 7};

class Purse:
    # Это перегруженный оператор, код внутри этого метода исполняется тогда, когда создаётся экземпляр какого-то класса;
    # Это называется конструктор объекта;
    # Нужно для того, чтобы во время создания класса, сразу передать ему какие-то свойства;
    def __init__(self, currency, name):
        # Переменные в классе называются полями или свойствами;
        # Атрибуты - все имена в классе (методы и переменные);
        # При запуске класса, в получившихся объектах у переменной money, будет разное значение, для этого используем self,
        # данную переменную money, мы навешиваем на self;

        # С помошью двух подчёркиваний, мы делаем свойство приватным;
        self.__money = 0
        self.currency = currency
        self.name = name
        self.smt = 'smt'

    # В параметр self передаётся имя переменной, в которой запущен класс, благодаря этому параметру,
    # производные объекты от нашего класса ведут себя по разному;
    # Могут присутствовать и другие параметры;
    def show(self, name='unknown'):
        print(f'hello {name}')

    # Если метод инкапсулирован, то мы не сможем использовать его вне класса;
    def __encapsulated_method(self):
        print('сработал инкапсулированный метод')

    # Вызовем его в одноимённом методе класса-потомка;
    def polymorph_method(self):
        print('Сработал родительский метод')

    def info(self):
        self.__encapsulated_method()
        # Видно, что можем обращаться к переменным, находящимся в конструкторе;
        return self.__money

    def top_up_balance(self, money):
        self.__money += money

    # Код здесь - исполнится во время удаления объекта, исполняется всегда;
    def __del__(self):
        print('Кошелёк удалён')

# Здесь производится запуск нашего класса;
# x = Purse('USD', 'Constantin')
# y = Purse('BTC', 'Constantin')
# x.show()
# y.show('Constantin')
# # Так как свойство приватное, мы не можем его изменять извне;
# # x.__money += 200
# x.top_up_balance(300)
# # print(x.__money)

